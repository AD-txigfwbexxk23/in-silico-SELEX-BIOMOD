%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Fri Aug 22 22:46:01 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGAUGCCGCAGAGAGAUAAUUCAUUGGGGGCCCCAUGCUAUCCGAGGCCGGUCUACUUCGUCGAAAUCC\
) } def
/len { sequence length } bind def

/coor [
[56.17185974 202.01266479]
[49.33325958 215.36306763]
[42.49465942 228.71348572]
[43.85763931 245.05589294]
[30.23372269 254.18392944]
[15.63803005 246.70744324]
[15.08535576 230.31761169]
[29.14424515 221.87487793]
[35.98284531 208.52447510]
[42.82144547 195.17405701]
[31.49031830 187.37225342]
[21.21101189 178.22904968]
[12.14134407 167.88479614]
[4.42055941 156.49830627]
[-1.83280480 144.24441528]
[-6.52274179 131.31123352]
[-9.57724762 117.89734650]
[-10.94942665 104.20867920]
[-10.61821175 90.45539856]
[-8.58868790 76.84864807]
[-4.89201450 63.59734344]
[0.41505337 50.90492249]
[7.25103760 38.96625519]
[15.51098633 27.96462822]
[25.06808472 18.06895447]
[35.77560425 9.43115807]
[47.46915436 2.18385458]
[59.96920395 -3.56168890]
[55.51850891 -17.88619041]
[51.06781769 -32.21069336]
[46.61712646 -46.53519440]
[36.14339828 -59.86701202]
[46.05478668 -73.62203217]
[62.01600647 -67.90575409]
[60.94162750 -50.98588562]
[65.39231873 -36.66138458]
[69.84300995 -22.33688354]
[74.29370117 -8.01238155]
[94.44194794 -10.89001846]
[114.77696228 -10.04149055]
[134.61543274 -5.49530935]
[153.29074097 2.59576201]
[170.17535400 13.95984554]
[184.70190430 28.21508026]
[196.38227844 44.88245773]
[209.87673950 38.33268738]
[223.37121582 31.78292084]
[232.11447144 17.90893936]
[248.48861694 18.81413078]
[255.64933777 33.56731033]
[246.23027039 46.99167252]
[229.92097473 45.27738190]
[216.42651367 51.82715225]
[202.93205261 58.37691879]
[207.11766052 70.78877258]
[209.81240845 83.60718536]
[210.97879028 96.65374756]
[210.60057068 109.74688721]
[208.68302917 122.70436859]
[205.25283813 135.34585571]
[200.35774231 147.49539185]
[194.06587219 158.98390198]
[186.46479797 169.65147400]
[177.66030884 179.34962463]
[167.77496338 187.94340515]
[156.94631958 195.31320190]
[145.32508850 201.35641479]
[133.07304382 205.98896790]
[120.36067963 209.14637756]
[107.36493683 210.78468323]
[94.26669312 210.88108826]
[81.24824524 209.43426514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[28 38]
[29 37]
[30 36]
[31 35]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
