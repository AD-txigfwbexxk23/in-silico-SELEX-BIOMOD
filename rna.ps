%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Fri Aug  1 11:52:42 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUCGUGCUAAAUACAGACCUUUCUCCAAGACCAACCCUAACCCCUUCGGCGAACACUCUACAGGAAAGCUUUAAGGCGG\
) } def
/len { sequence length } bind def

/coor [
[67.46607971 110.40076447]
[57.48619461 121.59906006]
[47.50630951 132.79736328]
[37.52642441 143.99565125]
[42.42325592 158.55300903]
[39.36962891 173.60528564]
[29.18695259 185.10348511]
[14.61431980 189.95466614]
[-0.42830843 186.85388184]
[-11.89453888 176.63520813]
[-16.70001411 162.04743958]
[-13.55208397 147.01460266]
[-3.29752755 135.58045959]
[11.30523205 130.82073975]
[26.32812500 134.01577759]
[36.30801010 122.81747437]
[46.28789520 111.61917114]
[56.26778030 100.42087555]
[41.35105896 101.99927521]
[26.48083878 100.03036499]
[12.48890400 94.62428284]
[0.15790263 86.08341217]
[-9.82242107 74.88550568]
[-16.89380836 61.65692139]
[-20.66071701 47.13761139]
[-20.91244125 32.13972092]
[-17.63490105 17.50217628]
[-11.01142788 4.04373741]
[-1.41251063 -7.48278809]
[10.62492657 -16.43265343]
[24.42756081 -22.30524254]
[39.22333145 -24.77206421]
[54.18461990 -23.69513893]
[68.47456360 -19.13470078]
[81.29383087 -11.34584522]
[91.92537689 -0.76424605]
[99.77451324 12.01820564]
[104.40219116 26.28651237]
[105.54956055 41.24256516]
[103.15243530 56.04978943]
[97.34490967 69.87992096]
[88.45182800 81.95937347]
[76.97164917 91.61179352]
[91.96063995 92.18634033]
[106.95788574 92.47366333]
[121.95788574 92.47366333]
[136.95788574 92.47366333]
[151.95788574 92.47366333]
[167.52790833 82.86857605]
[182.43043518 91.92488098]
[197.41941833 91.35033417]
[212.40841675 90.77579498]
[216.75253296 76.27037048]
[225.57321167 63.96287155]
[237.91363525 55.18833160]
[252.43521118 50.89854050]
[267.56277466 51.55882263]
[281.65536499 57.09756088]
[293.18432617 66.91394806]
[300.89910889 79.94318390]
[303.96286011 94.77194214]
[302.04324341 109.79172516]
[295.34844971 123.37328339]
[284.60476685 134.04341125]
[270.97750854 140.64466858]
[255.94488525 142.46101379]
[241.13752747 139.29542542]
[228.16162109 131.49128723]
[218.42471313 119.89511108]
[212.98295593 105.76478577]
[197.99397278 106.33933258]
[183.00497437 106.91387177]
[174.41387939 115.65518188]
[161.76145935 116.10970306]
[151.95788574 107.47366333]
[136.95788574 107.47366333]
[121.95788574 107.47366333]
[106.95788574 107.47366333]
[99.32253265 110.68959045]
[91.38610077 107.17533112]
[76.39710999 106.60079193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[43 81]
[44 80]
[45 78]
[46 77]
[47 76]
[48 75]
[50 72]
[51 71]
[52 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
